/* Sym4.java
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * Copyright â’¸ 2015 Universiteit Gent
 * 
 * This file is part of the Equi application
 * 
 * Corresponding author (see also file AUTHORS)
 * 
 * Kris Coolsaet
 * Department of Applied Mathematics, Computer Science and Statistics
 * Ghent University 
 * Krijgslaan 281-S9
 * B-9000 GENT Belgium
 * 
 * The Equi application is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * The Equi Application is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with the Equi Application (file LICENSE in the distribution).  If not,
 * see http://www.gnu.org/licenses/.
 */

package be.ugent.caagt.equi.grp;

import be.ugent.caagt.perm.Perm;

import java.util.Arrays;

/**
 * Symmetric group of order 4.
 */
public class Sym4 extends AbstractCombinatorialGroup {

    private Perm g3;

    private Perm g4;

    /**
     * Symmetric group of order 4 generated by 'canonical' elements g3,g4.
     */
    public Sym4(int degree, Perm g3, Perm g4) {
        super(24, degree);
        this.g3 = g3;
        this.g4 = g4;
    }

    @Override
    public String toString() {
        return "Sym(4)";
    }

    @Override
    public Iterable<CombinatorialGroup> getSubgroups() {
        Perm g2 = g4.mul(g4);
        Perm g2star = g2.conj(g3);
        return Arrays.asList(
                this,
                new Alt4(degree, g3, g2),
                new Dihedral(degree, g3, g4.mul(g2star)) // TODO: need Dih3? (= Sym(3))
        );
    }

    @Override
    public Iterable<CombinedGroup> getPointGroups() {
        return Arrays.asList(
                new CombinedGroup("O", order, degree, Arrays.asList(
                        new ExtendedPerm(g3, PointGroupElement.ROT_3),
                        new ExtendedPerm(g4, PointGroupElement.ROT_G4)
                )),
                new CombinedGroup("Td", order, degree, Arrays.asList(
                        new ExtendedPerm(g3, PointGroupElement.ROT_3),
                        new ExtendedPerm(g4, PointGroupElement.ROT_G4.minus())
                ))
        );
    }

}
