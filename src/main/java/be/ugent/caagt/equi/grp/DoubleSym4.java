/* DoubleSym4.java
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * Copyright â’¸ 2015 Universiteit Gent
 * 
 * This file is part of the Equi application
 * 
 * Corresponding author (see also file AUTHORS)
 * 
 * Kris Coolsaet
 * Department of Applied Mathematics, Computer Science and Statistics
 * Ghent University 
 * Krijgslaan 281-S9
 * B-9000 GENT Belgium
 * 
 * The Equi application is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * The Equi Application is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with the Equi Application (file LICENSE in the distribution).  If not,
 * see http://www.gnu.org/licenses/.
 */

package be.ugent.caagt.equi.grp;

import be.ugent.caagt.perm.Perm;

import java.util.Arrays;
import java.util.Collections;

/**
 * Doubled symmetric group of order 4.
 */
public class DoubleSym4 extends AbstractCombinatorialGroup {

    private Perm g3i;

    private Perm g4;

    /**
     *Twofold cover of group of order 4 generated by 'canonical' elements -g3,g4.
     */
    public DoubleSym4(int degree, Perm g3i, Perm g4) {
        super(48, degree);
        this.g3i = g3i;
        this.g4 = g4;
    }

    @Override
    public String toString() {
        return "2Sym(4)";
    }

    @Override
    public Iterable<CombinatorialGroup> getSubgroups() {
        Perm i = g3i.pow(3);
        Perm g3 = g3i.mul(i);
        Perm g4i = g4.mul(i);
        Perm g2 = g4.mul(g4);
        Perm g2star = g2.conj(g3);
        Perm r = g4i.mul(g2star);
        Perm ri = r.mul(i);
        return Arrays.asList(
                this,
                new Sym4(degree, g3, g4),
                // new Sym4(degree, g3, g4i), // equivalent by external automorphism
                new DoubleAlt4(degree, g3i, g2),
                new DoubleDihedral(degree, g4, i, g2star),
                new Dih6(degree, g3i, r),
                new Alt4(degree, g3, g2),
                new DoubleCyclic(degree, g4, i),
                new Dih4(degree, g4, ri),
                // new Dih4(degree, g4i, r), // equivalent by external automorphism
                new Dih4(degree, g4i, ri),
                new Dih4(degree, g4,i),
                new Cubed2(degree, g2, g2star, i),
                new Cubed2(degree, g2, r, i),
                new Sym3(degree, g3, ri),
                // new Sym3(degree, g3, r), // equivalent by external automorphism
                new Z6(degree, g3.mul(i)),
                new Squared2(degree, g2, g2star),
                new Squared2(degree, g2, g2star.mul(i)),
                new Squared2(degree, g2, i),
                new Squared2(degree, g2, ri),
                // new Squared2(degree, g2, r), // equivalent by external automorphism
                new Squared2(degree, g2.mul(i), ri),
                new Squared2(degree, r, i),
                new Z4(degree, g4),
                new Z3(degree, g3),
                new Z2(degree, g2),
                new Z2(degree, g2.mul(i)),
                new Z2(degree, ri),
                // new Z2(degree, r), // equivalent by external automorphism
                new Z2(degree, i)
        );
    }

    @Override
    public Iterable<CombinedGroup> getPointGroups() {
        return Collections.singleton(
                new CombinedGroup("Oh", order, degree, Arrays.asList(
                        new ExtendedPerm(g3i, PointGroupElement.ROT_3.minus()),
                        new ExtendedPerm(g4, PointGroupElement.ROT_G4)
                ))
        );
    }

}
